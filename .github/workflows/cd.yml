name: CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build CSS assets
      run: npm run build:css

    - name: Create environment file
      run: |
        echo "NODE_ENV=production" >> .env
        echo "MONGODB_URL=${{ secrets.MONGODB_URL }}" >> .env
        echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env
        echo "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" >> .env
        echo "PORT=${{ secrets.PORT || 3000 }}" >> .env

    - name: Log in to Container Registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

    - name: Extract metadata
      id: meta
      run: |
        echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: |
          org.opencontainers.image.title=ConnectED
          org.opencontainers.image.description=Modern education platform
          org.opencontainers.image.url=https://github.com/${{ github.repository }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.version=${{ github.sha }}
          org.opencontainers.image.created=${{ steps.meta.outputs.created }}
          org.opencontainers.image.revision=${{ github.sha }}

    - name: Deploy to production
      run: |
        echo "Deploying to production server..."
        # Add your deployment commands here
        # Examples:
        # - SSH into server and pull new image
        # - Use kubectl for Kubernetes deployment
        # - Use docker-compose pull && docker-compose up -d
        # - Use AWS CLI for ECS deployment

    - name: Run database migrations
      run: |
        echo "Running database migrations..."
        # Add migration commands here
        # npm run db:migrate

    - name: Health check
      run: |
        echo "Performing health checks..."
        # Add health check commands here
        # curl -f https://your-domain.com/health || exit 1

    - name: Notify deployment success
      if: success()
      run: |
        echo "Deployment completed successfully!"
        # Add notification commands here (Slack, Discord, etc.)

    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, initiating rollback..."
        # Add rollback commands here